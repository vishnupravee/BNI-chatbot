{"ast":null,"code":"// import React, { useState, useEffect, useRef, useCallback } from 'react';\n// import ReactMarkdown from 'react-markdown';\n// import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\n// import './App.css';\n// // --- SVG Icons ---\n// const UserIcon = () => ( <svg width=\"30\" height=\"30\" viewBox=\"0 0 24 24\" fill=\"#d9d9e9\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"/></svg> );\n// const BotIcon = ({ logoSrc }) => ( <img src={logoSrc} alt=\"bot icon\" style={{ width: '30px', height: '30px', borderRadius: '4px' }} /> );\n// const MicrophoneIcon = () => ( <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" stroke=\"currentColor\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z\"></path><path d=\"M19 10v2a7 7 0 0 1-14 0v-2\"></path><line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"22\"></line></svg> );\n// // 1. --- NEW SVG ICON FOR STOP BUTTON ---\n// const StopIcon = () => (\n//   <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n//     <path d=\"M6 6h12v12H6V6z\"/>\n//   </svg>\n// );\n// function App() {\n//   const [messages, setMessages] = useState([]);\n//   const [input, setInput] = useState('');\n//   // 2. --- NEW STATE TO TRACK IF BOT IS SPEAKING ---\n//   const [isBotSpeaking, setIsBotSpeaking] = useState(false);\n//   const chatWindowRef = useRef(null);\n//   const { transcript, listening, resetTranscript, browserSupportsSpeechRecognition } = useSpeechRecognition();\n//   // This needs to be wrapped in useCallback to satisfy the linter warning in the next useEffect\n//   const handleSend = useCallback(async (messageToSend, isVoiceInput = false) => {\n//     if (messageToSend.trim() === '') return;\n//     setInput('');\n//     resetTranscript();\n//     const userMessage = { text: messageToSend, sender: 'user' };\n//     setMessages(prevMessages => [...prevMessages, userMessage]);\n//     try {\n//       const response = await fetch('http://localhost:5001/api/chat', {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ message: messageToSend }),\n//       });\n//       const data = await response.json();\n//       const botMessage = { text: data.reply, sender: 'bot' };\n//       setMessages(prevMessages => [...prevMessages, botMessage]);\n//       if (isVoiceInput) {\n//         window.speechSynthesis.cancel();\n//         const utterance = new SpeechSynthesisUtterance(data.reply);\n//         // 3. --- MANAGE SPEAKING STATE WITH EVENTS ---\n//         utterance.onstart = () => setIsBotSpeaking(true);\n//         // This onend event handles both natural finishes and manual cancellations\n//         utterance.onend = () => setIsBotSpeaking(false);\n//         window.speechSynthesis.speak(utterance);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching bot reply:', error);\n//       setIsBotSpeaking(false); // Ensure state is reset on error\n//       const errorMessage = { text: 'Sorry, I am having trouble connecting.', sender: 'bot' };\n//       setMessages(prevMessages => [...prevMessages, errorMessage]);\n//     }\n//   }, [resetTranscript]);\n//   useEffect(() => {\n//     if (!listening && transcript) {\n//       handleSend(transcript, true);\n//     }\n//   }, [listening, transcript, handleSend]);\n//   useEffect(() => { window.speechSynthesis.getVoices(); }, []);\n//   useEffect(() => { setInput(transcript); }, [transcript]);\n//   useEffect(() => {\n//     if (chatWindowRef.current) { chatWindowRef.current.scrollTop = chatWindowRef.current.scrollHeight; }\n//   }, [messages]);\n//   const handleNewChat = () => {\n//     window.speechSynthesis.cancel(); // Stop any speech on new chat\n//     setIsBotSpeaking(false);\n//     setMessages([]);\n//     resetTranscript();\n//     setInput('');\n//   };\n//   // 4. --- NEW FUNCTION TO HANDLE VOICE STOP ---\n//   const handleStopVoice = () => {\n//     window.speechSynthesis.cancel();\n//     setIsBotSpeaking(false);\n//   };\n//   const handleTextSubmit = () => {\n//     if (input.trim() === '') return;\n//     handleSend(input, false);\n//   };\n//   const handleVoiceRecording = () => {\n//     if (listening) {\n//       SpeechRecognition.stopListening();\n//     } else {\n//       resetTranscript();\n//       SpeechRecognition.startListening({ continuous: false });\n//     }\n//   };\n//   if (!browserSupportsSpeechRecognition) {\n//     return <span>Sorry, your browser does not support speech recognition.</span>;\n//   }\n//   return (\n//     <div className=\"App\">\n//       <div className=\"sidebar\">\n//         <div className=\"new-chat-button\" onClick={handleNewChat}>\n//           + New Chat\n//         </div>\n//       </div>\n//       <div className=\"main-content\">\n//         <div className=\"chat-window\" ref={chatWindowRef}>\n//           {messages.length === 0 ? (\n//             <div className=\"welcome-screen\">\n//               <img src=\"BNI.png\" className=\"welcome-logo\" alt=\"logo\" />\n//               <h2>How can I help you today?</h2>\n//             </div>\n//           ) : (\n//             messages.map((msg, index) => (\n//               <div key={index} className={`message-wrapper ${msg.sender}`}>\n//                 <div className=\"message\">\n//                   <div className=\"message-icon\">\n//                     {msg.sender === 'user' ? <UserIcon /> : <BotIcon logoSrc=\"BNI.png\" />}\n//                   </div>\n//                   <div className=\"message-content\">\n//                     <ReactMarkdown>{msg.text}</ReactMarkdown>\n//                   </div>\n//                 </div>\n//               </div>\n//             ))\n//           )}\n//         </div>\n//         <div className=\"chat-input-container\">\n//           <div className=\"chat-input\">\n//             <textarea\n//               value={input}\n//               onChange={(e) => setInput(e.target.value)}\n//               placeholder={listening ? \"Listening...\" : \"Ask BNI-ChatBot...\"}\n//               onKeyPress={(e) => {\n//                 if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); handleTextSubmit(); }\n//               }}\n//             />\n//             {/* 5. --- CONDITIONAL RENDERING OF BUTTONS --- */}\n//             {isBotSpeaking ? (\n//               <button onClick={handleStopVoice} className=\"stop-button\">\n//                 <StopIcon />\n//               </button>\n//             ) : (\n//               <button onClick={handleVoiceRecording} className={`mic-button ${listening ? 'listening' : ''}`}>\n//                 <MicrophoneIcon />\n//               </button>\n//             )}\n//             <button onClick={handleTextSubmit} className=\"send-button\" disabled={!input.trim()}>\n//               â†‘\n//             </button>\n//           </div>\n//           <p className=\"footer-text\">BNI-ChatBot can make mistakes. Consider checking important information.</p>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n// export default App;\nimport React,{useState,useEffect,useRef,useCallback}from'react';import ReactMarkdown from'react-markdown';import SpeechRecognition,{useSpeechRecognition}from'react-speech-recognition';import'./App.css';// --- SVG Icons ---\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const UserIcon=()=>/*#__PURE__*/_jsx(\"svg\",{width:\"30\",height:\"30\",viewBox:\"0 0 24 24\",fill:\"#d9d9e9\",xmlns:\"http://www.w3.org/2000/svg\",children:/*#__PURE__*/_jsx(\"path\",{d:\"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"})});const BotIcon=_ref=>{let{logoSrc}=_ref;return/*#__PURE__*/_jsx(\"img\",{src:logoSrc,alt:\"bot icon\",style:{width:'30px',height:'30px',borderRadius:'4px'}});};const MicrophoneIcon=()=>/*#__PURE__*/_jsxs(\"svg\",{width:\"24\",height:\"24\",viewBox:\"0 0 24 24\",fill:\"none\",xmlns:\"http://www.w3.org/2000/svg\",stroke:\"currentColor\",strokeWidth:\"1.5\",strokeLinecap:\"round\",strokeLinejoin:\"round\",children:[/*#__PURE__*/_jsx(\"path\",{d:\"M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z\"}),/*#__PURE__*/_jsx(\"path\",{d:\"M19 10v2aa7 7 0 0 1-14 0v-2\"}),/*#__PURE__*/_jsx(\"line\",{x1:\"12\",y1:\"19\",x2:\"12\",y2:\"22\"})]});const StopIcon=()=>/*#__PURE__*/_jsx(\"svg\",{width:\"24\",height:\"24\",viewBox:\"0 0 24 24\",fill:\"currentColor\",xmlns:\"http://www.w3.org/2000/svg\",children:/*#__PURE__*/_jsx(\"path\",{d:\"M6 6h12v12H6V6z\"})});function App(){const[messages,setMessages]=useState([]);const[input,setInput]=useState('');const[isBotSpeaking,setIsBotSpeaking]=useState(false);const chatWindowRef=useRef(null);const{transcript,listening,resetTranscript,browserSupportsSpeechRecognition}=useSpeechRecognition();const handleSend=useCallback(async function(messageToSend){let isVoiceInput=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(messageToSend.trim()==='')return;setInput('');resetTranscript();const userMessage={text:messageToSend,sender:'user'};setMessages(prevMessages=>[...prevMessages,userMessage]);try{const response=await fetch('http://localhost:5001/api/chat',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({message:messageToSend})});const data=await response.json();const botMessage={text:data.reply,sender:'bot'};setMessages(prevMessages=>[...prevMessages,botMessage]);if(isVoiceInput){window.speechSynthesis.cancel();const utterance=new SpeechSynthesisUtterance(data.reply);utterance.onstart=()=>setIsBotSpeaking(true);utterance.onend=()=>setIsBotSpeaking(false);window.speechSynthesis.speak(utterance);}}catch(error){console.error('Error fetching bot reply:',error);setIsBotSpeaking(false);const errorMessage={text:'Sorry, I am having trouble connecting.',sender:'bot'};setMessages(prevMessages=>[...prevMessages,errorMessage]);}},[resetTranscript]);useEffect(()=>{if(!listening&&transcript){handleSend(transcript,true);}},[listening,transcript,handleSend]);useEffect(()=>{window.speechSynthesis.getVoices();},[]);useEffect(()=>{setInput(transcript);},[transcript]);useEffect(()=>{if(chatWindowRef.current){chatWindowRef.current.scrollTop=chatWindowRef.current.scrollHeight;}},[messages]);const handleNewChat=()=>{window.speechSynthesis.cancel();setIsBotSpeaking(false);setMessages([]);resetTranscript();setInput('');};const handleStopVoice=()=>{window.speechSynthesis.cancel();setIsBotSpeaking(false);};const handleTextSubmit=()=>{if(input.trim()==='')return;handleSend(input,false);};const handleVoiceRecording=()=>{if(listening){SpeechRecognition.stopListening();}else{resetTranscript();SpeechRecognition.startListening({continuous:false,language:'en-US'});}};if(!browserSupportsSpeechRecognition){return/*#__PURE__*/_jsx(\"span\",{children:\"Sorry, your browser does not support speech recognition.\"});}return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"sidebar\",children:/*#__PURE__*/_jsx(\"div\",{className:\"new-chat-button\",onClick:handleNewChat,children:\"+ New Chat\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"main-content\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"chat-window\",ref:chatWindowRef,children:messages.length===0?/*#__PURE__*/_jsxs(\"div\",{className:\"welcome-screen\",children:[/*#__PURE__*/_jsx(\"img\",{src:\"BNI.png\",className:\"welcome-logo\",alt:\"logo\"}),/*#__PURE__*/_jsx(\"h2\",{children:\"How can I help you today?\"})]}):messages.map((msg,index)=>/*#__PURE__*/_jsx(\"div\",{className:\"message-wrapper \".concat(msg.sender),children:/*#__PURE__*/_jsxs(\"div\",{className:\"message\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"message-icon\",children:msg.sender==='user'?/*#__PURE__*/_jsx(UserIcon,{}):/*#__PURE__*/_jsx(BotIcon,{logoSrc:\"BNI.png\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"message-content\",children:/*#__PURE__*/_jsx(ReactMarkdown,{children:msg.text})})]})},index))}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-input-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chat-input\",children:[/*#__PURE__*/_jsx(\"textarea\",{value:input,onChange:e=>setInput(e.target.value),placeholder:listening?\"Listening...\":\"Ask BNI-ChatBot...\",onKeyPress:e=>{if(e.key==='Enter'&&!e.shiftKey){e.preventDefault();handleTextSubmit();}}}),isBotSpeaking?/*#__PURE__*/_jsx(\"button\",{onClick:handleStopVoice,className:\"stop-button\",children:/*#__PURE__*/_jsx(StopIcon,{})}):/*#__PURE__*/_jsx(\"button\",{onClick:handleVoiceRecording,className:\"mic-button \".concat(listening?'listening':''),children:/*#__PURE__*/_jsx(MicrophoneIcon,{})}),/*#__PURE__*/_jsx(\"button\",{onClick:handleTextSubmit,className:\"send-button\",disabled:!input.trim(),children:\"\\u2191\"})]}),/*#__PURE__*/_jsx(\"p\",{className:\"footer-text\",children:\"BNI-ChatBot can make mistakes. Consider checking important information.\"})]})]})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","ReactMarkdown","SpeechRecognition","useSpeechRecognition","jsx","_jsx","jsxs","_jsxs","UserIcon","width","height","viewBox","fill","xmlns","children","d","BotIcon","_ref","logoSrc","src","alt","style","borderRadius","MicrophoneIcon","stroke","strokeWidth","strokeLinecap","strokeLinejoin","x1","y1","x2","y2","StopIcon","App","messages","setMessages","input","setInput","isBotSpeaking","setIsBotSpeaking","chatWindowRef","transcript","listening","resetTranscript","browserSupportsSpeechRecognition","handleSend","messageToSend","isVoiceInput","arguments","length","undefined","trim","userMessage","text","sender","prevMessages","response","fetch","method","headers","body","JSON","stringify","message","data","json","botMessage","reply","window","speechSynthesis","cancel","utterance","SpeechSynthesisUtterance","onstart","onend","speak","error","console","errorMessage","getVoices","current","scrollTop","scrollHeight","handleNewChat","handleStopVoice","handleTextSubmit","handleVoiceRecording","stopListening","startListening","continuous","language","className","onClick","ref","map","msg","index","concat","value","onChange","e","target","placeholder","onKeyPress","key","shiftKey","preventDefault","disabled"],"sources":["C:/Users/Jd Creation/OneDrive/Desktop/bnichat-bot/frontend/src/App.js"],"sourcesContent":["// import React, { useState, useEffect, useRef, useCallback } from 'react';\n// import ReactMarkdown from 'react-markdown';\n// import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\n// import './App.css';\n\n// // --- SVG Icons ---\n// const UserIcon = () => ( <svg width=\"30\" height=\"30\" viewBox=\"0 0 24 24\" fill=\"#d9d9e9\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"/></svg> );\n// const BotIcon = ({ logoSrc }) => ( <img src={logoSrc} alt=\"bot icon\" style={{ width: '30px', height: '30px', borderRadius: '4px' }} /> );\n// const MicrophoneIcon = () => ( <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" stroke=\"currentColor\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z\"></path><path d=\"M19 10v2a7 7 0 0 1-14 0v-2\"></path><line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"22\"></line></svg> );\n\n// // 1. --- NEW SVG ICON FOR STOP BUTTON ---\n// const StopIcon = () => (\n//   <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n//     <path d=\"M6 6h12v12H6V6z\"/>\n//   </svg>\n// );\n\n\n// function App() {\n//   const [messages, setMessages] = useState([]);\n//   const [input, setInput] = useState('');\n//   // 2. --- NEW STATE TO TRACK IF BOT IS SPEAKING ---\n//   const [isBotSpeaking, setIsBotSpeaking] = useState(false);\n//   const chatWindowRef = useRef(null);\n\n//   const { transcript, listening, resetTranscript, browserSupportsSpeechRecognition } = useSpeechRecognition();\n\n//   // This needs to be wrapped in useCallback to satisfy the linter warning in the next useEffect\n//   const handleSend = useCallback(async (messageToSend, isVoiceInput = false) => {\n//     if (messageToSend.trim() === '') return;\n\n//     setInput('');\n//     resetTranscript();\n\n//     const userMessage = { text: messageToSend, sender: 'user' };\n//     setMessages(prevMessages => [...prevMessages, userMessage]);\n    \n//     try {\n//       const response = await fetch('http://localhost:5001/api/chat', {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ message: messageToSend }),\n//       });\n\n//       const data = await response.json();\n//       const botMessage = { text: data.reply, sender: 'bot' };\n//       setMessages(prevMessages => [...prevMessages, botMessage]);\n\n//       if (isVoiceInput) {\n//         window.speechSynthesis.cancel();\n//         const utterance = new SpeechSynthesisUtterance(data.reply);\n        \n//         // 3. --- MANAGE SPEAKING STATE WITH EVENTS ---\n//         utterance.onstart = () => setIsBotSpeaking(true);\n//         // This onend event handles both natural finishes and manual cancellations\n//         utterance.onend = () => setIsBotSpeaking(false);\n        \n//         window.speechSynthesis.speak(utterance);\n//       }\n\n//     } catch (error) {\n//       console.error('Error fetching bot reply:', error);\n//       setIsBotSpeaking(false); // Ensure state is reset on error\n//       const errorMessage = { text: 'Sorry, I am having trouble connecting.', sender: 'bot' };\n//       setMessages(prevMessages => [...prevMessages, errorMessage]);\n//     }\n//   }, [resetTranscript]);\n\n//   useEffect(() => {\n//     if (!listening && transcript) {\n//       handleSend(transcript, true);\n//     }\n//   }, [listening, transcript, handleSend]);\n\n//   useEffect(() => { window.speechSynthesis.getVoices(); }, []);\n//   useEffect(() => { setInput(transcript); }, [transcript]);\n//   useEffect(() => {\n//     if (chatWindowRef.current) { chatWindowRef.current.scrollTop = chatWindowRef.current.scrollHeight; }\n//   }, [messages]);\n\n//   const handleNewChat = () => {\n//     window.speechSynthesis.cancel(); // Stop any speech on new chat\n//     setIsBotSpeaking(false);\n//     setMessages([]);\n//     resetTranscript();\n//     setInput('');\n//   };\n  \n//   // 4. --- NEW FUNCTION TO HANDLE VOICE STOP ---\n//   const handleStopVoice = () => {\n//     window.speechSynthesis.cancel();\n//     setIsBotSpeaking(false);\n//   };\n\n//   const handleTextSubmit = () => {\n//     if (input.trim() === '') return;\n//     handleSend(input, false);\n//   };\n\n//   const handleVoiceRecording = () => {\n//     if (listening) {\n//       SpeechRecognition.stopListening();\n//     } else {\n//       resetTranscript();\n//       SpeechRecognition.startListening({ continuous: false });\n//     }\n//   };\n\n//   if (!browserSupportsSpeechRecognition) {\n//     return <span>Sorry, your browser does not support speech recognition.</span>;\n//   }\n\n//   return (\n//     <div className=\"App\">\n//       <div className=\"sidebar\">\n//         <div className=\"new-chat-button\" onClick={handleNewChat}>\n//           + New Chat\n//         </div>\n//       </div>\n//       <div className=\"main-content\">\n//         <div className=\"chat-window\" ref={chatWindowRef}>\n//           {messages.length === 0 ? (\n//             <div className=\"welcome-screen\">\n//               <img src=\"BNI.png\" className=\"welcome-logo\" alt=\"logo\" />\n//               <h2>How can I help you today?</h2>\n//             </div>\n//           ) : (\n//             messages.map((msg, index) => (\n//               <div key={index} className={`message-wrapper ${msg.sender}`}>\n//                 <div className=\"message\">\n//                   <div className=\"message-icon\">\n//                     {msg.sender === 'user' ? <UserIcon /> : <BotIcon logoSrc=\"BNI.png\" />}\n//                   </div>\n//                   <div className=\"message-content\">\n//                     <ReactMarkdown>{msg.text}</ReactMarkdown>\n//                   </div>\n//                 </div>\n//               </div>\n//             ))\n//           )}\n//         </div>\n//         <div className=\"chat-input-container\">\n//           <div className=\"chat-input\">\n//             <textarea\n//               value={input}\n//               onChange={(e) => setInput(e.target.value)}\n//               placeholder={listening ? \"Listening...\" : \"Ask BNI-ChatBot...\"}\n//               onKeyPress={(e) => {\n//                 if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); handleTextSubmit(); }\n//               }}\n//             />\n//             {/* 5. --- CONDITIONAL RENDERING OF BUTTONS --- */}\n//             {isBotSpeaking ? (\n//               <button onClick={handleStopVoice} className=\"stop-button\">\n//                 <StopIcon />\n//               </button>\n//             ) : (\n//               <button onClick={handleVoiceRecording} className={`mic-button ${listening ? 'listening' : ''}`}>\n//                 <MicrophoneIcon />\n//               </button>\n//             )}\n//             <button onClick={handleTextSubmit} className=\"send-button\" disabled={!input.trim()}>\n//               â†‘\n//             </button>\n//           </div>\n//           <p className=\"footer-text\">BNI-ChatBot can make mistakes. Consider checking important information.</p>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport './App.css';\n\n// --- SVG Icons ---\nconst UserIcon = () => ( <svg width=\"30\" height=\"30\" viewBox=\"0 0 24 24\" fill=\"#d9d9e9\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"/></svg> );\nconst BotIcon = ({ logoSrc }) => ( <img src={logoSrc} alt=\"bot icon\" style={{ width: '30px', height: '30px', borderRadius: '4px' }} /> );\nconst MicrophoneIcon = () => ( <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" stroke=\"currentColor\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z\"></path><path d=\"M19 10v2aa7 7 0 0 1-14 0v-2\"></path><line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"22\"></line></svg> );\nconst StopIcon = () => ( <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M6 6h12v12H6V6z\"/></svg> );\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isBotSpeaking, setIsBotSpeaking] = useState(false);\n  const chatWindowRef = useRef(null);\n\n  const { transcript, listening, resetTranscript, browserSupportsSpeechRecognition } = useSpeechRecognition();\n\n  const handleSend = useCallback(async (messageToSend, isVoiceInput = false) => {\n    if (messageToSend.trim() === '') return;\n\n    setInput('');\n    resetTranscript();\n\n    const userMessage = { text: messageToSend, sender: 'user' };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    \n    try {\n      const response = await fetch('http://localhost:5001/api/chat', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ message: messageToSend }),\n      });\n\n      const data = await response.json();\n      const botMessage = { text: data.reply, sender: 'bot' };\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n\n      if (isVoiceInput) {\n        window.speechSynthesis.cancel();\n        const utterance = new SpeechSynthesisUtterance(data.reply);\n        utterance.onstart = () => setIsBotSpeaking(true);\n        utterance.onend = () => setIsBotSpeaking(false);\n        window.speechSynthesis.speak(utterance);\n      }\n    } catch (error) {\n      console.error('Error fetching bot reply:', error);\n      setIsBotSpeaking(false);\n      const errorMessage = { text: 'Sorry, I am having trouble connecting.', sender: 'bot' };\n      setMessages(prevMessages => [...prevMessages, errorMessage]);\n    }\n  }, [resetTranscript]);\n\n  useEffect(() => {\n    if (!listening && transcript) {\n      handleSend(transcript, true);\n    }\n  }, [listening, transcript, handleSend]);\n\n  useEffect(() => { window.speechSynthesis.getVoices(); }, []);\n  useEffect(() => { setInput(transcript); }, [transcript]);\n  useEffect(() => {\n    if (chatWindowRef.current) { chatWindowRef.current.scrollTop = chatWindowRef.current.scrollHeight; }\n  }, [messages]);\n\n  const handleNewChat = () => {\n    window.speechSynthesis.cancel();\n    setIsBotSpeaking(false);\n    setMessages([]);\n    resetTranscript();\n    setInput('');\n  };\n  \n  const handleStopVoice = () => {\n    window.speechSynthesis.cancel();\n    setIsBotSpeaking(false);\n  };\n\n  const handleTextSubmit = () => {\n    if (input.trim() === '') return;\n    handleSend(input, false);\n  };\n\n  const handleVoiceRecording = () => {\n    if (listening) {\n      SpeechRecognition.stopListening();\n    } else {\n      resetTranscript();\n      SpeechRecognition.startListening({ continuous: false, language: 'en-US' });\n    }\n  };\n\n  if (!browserSupportsSpeechRecognition) {\n    return <span>Sorry, your browser does not support speech recognition.</span>;\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <div className=\"new-chat-button\" onClick={handleNewChat}>\n          + New Chat\n        </div>\n      </div>\n      <div className=\"main-content\">\n        <div className=\"chat-window\" ref={chatWindowRef}>\n          {messages.length === 0 ? (\n            <div className=\"welcome-screen\">\n              <img src=\"BNI.png\" className=\"welcome-logo\" alt=\"logo\" />\n              <h2>How can I help you today?</h2>\n            </div>\n          ) : (\n            messages.map((msg, index) => (\n              <div key={index} className={`message-wrapper ${msg.sender}`}>\n                <div className=\"message\">\n                  <div className=\"message-icon\">\n                    {msg.sender === 'user' ? <UserIcon /> : <BotIcon logoSrc=\"BNI.png\" />}\n                  </div>\n                  <div className=\"message-content\">\n                    <ReactMarkdown>{msg.text}</ReactMarkdown>\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n        <div className=\"chat-input-container\">\n          <div className=\"chat-input\">\n            <textarea\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              placeholder={listening ? \"Listening...\" : \"Ask BNI-ChatBot...\"}\n              onKeyPress={(e) => {\n                if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); handleTextSubmit(); }\n              }}\n            />\n            {isBotSpeaking ? (\n              <button onClick={handleStopVoice} className=\"stop-button\">\n                <StopIcon />\n              </button>\n            ) : (\n              <button onClick={handleVoiceRecording} className={`mic-button ${listening ? 'listening' : ''}`}>\n                <MicrophoneIcon />\n              </button>\n            )}\n            <button onClick={handleTextSubmit} className=\"send-button\" disabled={!input.trim()}>\n              â†‘\n            </button>\n          </div>\n          <p className=\"footer-text\">BNI-ChatBot can make mistakes. Consider checking important information.</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}