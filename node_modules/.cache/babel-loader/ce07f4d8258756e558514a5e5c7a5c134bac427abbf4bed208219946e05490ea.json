{"ast":null,"code":"import { _ as _async_to_generator } from './cc-BU0zEyYq.js';\nimport { useState, useReducer, useRef, useCallback, useEffect } from 'react';\nimport debounce from 'lodash.debounce';\nconst NativeSpeechRecognition = typeof window !== \"undefined\" && (window.SpeechRecognition || window.webkitSpeechRecognition || window.mozSpeechRecognition || window.msSpeechRecognition || window.oSpeechRecognition);\nconst isNative = SpeechRecognition => SpeechRecognition === NativeSpeechRecognition;\nvar isAndroid = () => /(android)/i.test(typeof navigator !== \"undefined\" ? navigator.userAgent : \"\");\nconst concatTranscripts = function () {\n  for (var _len = arguments.length, transcriptParts = new Array(_len), _key = 0; _key < _len; _key++) {\n    transcriptParts[_key] = arguments[_key];\n  }\n  return transcriptParts.map(t => t.trim()).join(\" \").trim();\n};\n// The command matching code is a modified version of Backbone.Router by Jeremy Ashkenas, under the MIT license.\nconst optionalParam = /\\s*\\((.*?)\\)\\s*/g;\nconst optionalRegex = /(\\(\\?:[^)]+\\))\\?/g;\nconst namedParam = /(\\(\\?)?:\\w+/g;\nconst splatParam = /\\*/g;\nconst escapeRegExp = /[-{}[\\]+?.,\\\\^$|#]/g;\nconst commandToRegExp = command => {\n  if (command instanceof RegExp) {\n    return new RegExp(command.source, \"i\");\n  }\n  command = command.replace(escapeRegExp, \"\\\\$&\").replace(optionalParam, \"(?:$1)?\").replace(namedParam, (match, optional) => {\n    return optional ? match : \"([^\\\\s]+)\";\n  }).replace(splatParam, \"(.*?)\").replace(optionalRegex, \"\\\\s*$1?\\\\s*\");\n  return new RegExp(\"^\" + command + \"$\", \"i\");\n};\n// this is from https://github.com/aceakash/string-similarity\nconst compareTwoStringsUsingDiceCoefficient = (first, second) => {\n  first = first.replace(/\\s+/g, \"\").toLowerCase();\n  second = second.replace(/\\s+/g, \"\").toLowerCase();\n  if (!first.length && !second.length) return 1; // if both are empty strings\n  if (!first.length || !second.length) return 0; // if only one is empty string\n  if (first === second) return 1; // identical\n  if (first.length === 1 && second.length === 1) return 0; // both are 1-letter strings\n  if (first.length < 2 || second.length < 2) return 0; // if either is a 1-letter string\n  const firstBigrams = new Map();\n  for (let i = 0; i < first.length - 1; i++) {\n    const bigram = first.substring(i, i + 2);\n    const count = firstBigrams.has(bigram) ? firstBigrams.get(bigram) + 1 : 1;\n    firstBigrams.set(bigram, count);\n  }\n  let intersectionSize = 0;\n  for (let i = 0; i < second.length - 1; i++) {\n    const bigram = second.substring(i, i + 2);\n    const count = firstBigrams.has(bigram) ? firstBigrams.get(bigram) : 0;\n    if (count > 0) {\n      firstBigrams.set(bigram, count - 1);\n      intersectionSize++;\n    }\n  }\n  return 2.0 * intersectionSize / (first.length + second.length - 2);\n};\nconst browserSupportsPolyfills = () => {\n  return typeof window !== \"undefined\" && window.navigator !== undefined && window.navigator.mediaDevices !== undefined && window.navigator.mediaDevices.getUserMedia !== undefined && (window.AudioContext !== undefined || window.webkitAudioContext !== undefined);\n};\nclass RecognitionManager {\n  setSpeechRecognition(SpeechRecognition) {\n    const browserSupportsRecogniser = !!SpeechRecognition && (isNative(SpeechRecognition) || browserSupportsPolyfills());\n    if (browserSupportsRecogniser) {\n      this.disableRecognition();\n      this.recognition = new SpeechRecognition();\n      this.recognition.continuous = false;\n      this.recognition.interimResults = true;\n      this.recognition.onresult = this.updateTranscript.bind(this);\n      this.recognition.onend = this.onRecognitionDisconnect.bind(this);\n      this.recognition.onerror = this.onError.bind(this);\n    }\n    this.emitBrowserSupportsSpeechRecognitionChange(browserSupportsRecogniser);\n  }\n  subscribe(id, callbacks) {\n    this.subscribers[id] = callbacks;\n  }\n  unsubscribe(id) {\n    delete this.subscribers[id];\n  }\n  emitListeningChange(listening) {\n    this.listening = listening;\n    Object.keys(this.subscribers).forEach(id => {\n      const {\n        onListeningChange\n      } = this.subscribers[id];\n      onListeningChange(listening);\n    });\n  }\n  emitMicrophoneAvailabilityChange(isMicrophoneAvailable) {\n    this.isMicrophoneAvailable = isMicrophoneAvailable;\n    Object.keys(this.subscribers).forEach(id => {\n      const {\n        onMicrophoneAvailabilityChange\n      } = this.subscribers[id];\n      onMicrophoneAvailabilityChange(isMicrophoneAvailable);\n    });\n  }\n  emitTranscriptChange(interimTranscript, finalTranscript) {\n    Object.keys(this.subscribers).forEach(id => {\n      const {\n        onTranscriptChange\n      } = this.subscribers[id];\n      onTranscriptChange(interimTranscript, finalTranscript);\n    });\n  }\n  emitClearTranscript() {\n    Object.keys(this.subscribers).forEach(id => {\n      const {\n        onClearTranscript\n      } = this.subscribers[id];\n      onClearTranscript();\n    });\n  }\n  emitBrowserSupportsSpeechRecognitionChange(browserSupportsSpeechRecognitionChange) {\n    Object.keys(this.subscribers).forEach(id => {\n      const {\n        onBrowserSupportsSpeechRecognitionChange,\n        onBrowserSupportsContinuousListeningChange\n      } = this.subscribers[id];\n      onBrowserSupportsSpeechRecognitionChange(browserSupportsSpeechRecognitionChange);\n      onBrowserSupportsContinuousListeningChange(browserSupportsSpeechRecognitionChange);\n    });\n  }\n  disconnect(disconnectType) {\n    if (this.recognition && this.listening) {\n      switch (disconnectType) {\n        case \"ABORT\":\n          this.pauseAfterDisconnect = true;\n          this.abort();\n          break;\n        case \"RESET\":\n          this.pauseAfterDisconnect = false;\n          this.abort();\n          break;\n        case \"STOP\":\n        default:\n          this.pauseAfterDisconnect = true;\n          this.stop();\n      }\n    }\n  }\n  disableRecognition() {\n    if (this.recognition) {\n      this.recognition.onresult = () => {};\n      this.recognition.onend = () => {};\n      this.recognition.onerror = () => {};\n      if (this.listening) {\n        this.stopListening();\n      }\n    }\n  }\n  onError(event) {\n    if (event && event.error && event.error === \"not-allowed\") {\n      this.emitMicrophoneAvailabilityChange(false);\n      this.disableRecognition();\n    }\n  }\n  onRecognitionDisconnect() {\n    this.onStopListening();\n    this.listening = false;\n    if (this.pauseAfterDisconnect) {\n      this.emitListeningChange(false);\n    } else if (this.recognition) {\n      if (this.recognition.continuous) {\n        this.startListening({\n          continuous: this.recognition.continuous\n        });\n      } else {\n        this.emitListeningChange(false);\n      }\n    }\n    this.pauseAfterDisconnect = false;\n  }\n  updateTranscript(_ref) {\n    let {\n      results,\n      resultIndex\n    } = _ref;\n    const currentIndex = resultIndex === undefined ? results.length - 1 : resultIndex;\n    this.interimTranscript = \"\";\n    this.finalTranscript = \"\";\n    for (let i = currentIndex; i < results.length; ++i) {\n      if (results[i].isFinal && (!isAndroid() || results[i][0].confidence > 0)) {\n        this.updateFinalTranscript(results[i][0].transcript);\n      } else {\n        this.interimTranscript = concatTranscripts(this.interimTranscript, results[i][0].transcript);\n      }\n    }\n    let isDuplicateResult = false;\n    if (this.interimTranscript === \"\" && this.finalTranscript !== \"\") {\n      if (this.previousResultWasFinalOnly) {\n        isDuplicateResult = true;\n      }\n      this.previousResultWasFinalOnly = true;\n    } else {\n      this.previousResultWasFinalOnly = false;\n    }\n    if (!isDuplicateResult) {\n      this.emitTranscriptChange(this.interimTranscript, this.finalTranscript);\n    }\n  }\n  updateFinalTranscript(newFinalTranscript) {\n    this.finalTranscript = concatTranscripts(this.finalTranscript, newFinalTranscript);\n  }\n  resetTranscript() {\n    this.disconnect(\"RESET\");\n  }\n  startListening() {\n    return /*#__PURE__*/_async_to_generator(function () {\n      var _this = this;\n      let {\n        continuous = false,\n        language\n      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return function* () {\n        if (!_this.recognition) {\n          return;\n        }\n        const isContinuousChanged = continuous !== _this.recognition.continuous;\n        const isLanguageChanged = language && language !== _this.recognition.lang;\n        if (isContinuousChanged || isLanguageChanged) {\n          if (_this.listening) {\n            yield _this.stopListening();\n          }\n          _this.recognition.continuous = isContinuousChanged ? continuous : _this.recognition.continuous;\n          _this.recognition.lang = isLanguageChanged ? language : _this.recognition.lang;\n        }\n        if (!_this.listening) {\n          if (!_this.recognition.continuous) {\n            _this.resetTranscript();\n            _this.emitClearTranscript();\n          }\n          try {\n            yield _this.start();\n            _this.emitListeningChange(true);\n          } catch (e) {\n            // DOMExceptions indicate a redundant microphone start - safe to swallow\n            if (!(e instanceof DOMException)) {\n              _this.emitMicrophoneAvailabilityChange(false);\n            }\n          }\n        }\n      }();\n    }).apply(this, arguments);\n  }\n  abortListening() {\n    return /*#__PURE__*/_async_to_generator(function* () {\n      this.disconnect(\"ABORT\");\n      this.emitListeningChange(false);\n      yield new Promise(resolve => {\n        this.onStopListening = resolve;\n      });\n    }).call(this);\n  }\n  stopListening() {\n    return /*#__PURE__*/_async_to_generator(function* () {\n      this.disconnect(\"STOP\");\n      this.emitListeningChange(false);\n      yield new Promise(resolve => {\n        this.onStopListening = resolve;\n      });\n    }).call(this);\n  }\n  getRecognition() {\n    return this.recognition;\n  }\n  start() {\n    return /*#__PURE__*/_async_to_generator(function* () {\n      if (this.recognition && !this.listening) {\n        yield this.recognition.start();\n        this.listening = true;\n      }\n    }).call(this);\n  }\n  stop() {\n    if (this.recognition && this.listening) {\n      this.recognition.stop();\n      this.listening = false;\n    }\n  }\n  abort() {\n    if (this.recognition && this.listening) {\n      this.recognition.abort();\n      this.listening = false;\n    }\n  }\n  constructor(SpeechRecognition) {\n    this.recognition = null;\n    this.pauseAfterDisconnect = false;\n    this.interimTranscript = \"\";\n    this.finalTranscript = \"\";\n    this.listening = false;\n    this.isMicrophoneAvailable = true;\n    this.subscribers = {};\n    this.onStopListening = () => {};\n    this.previousResultWasFinalOnly = false;\n    this.resetTranscript = this.resetTranscript.bind(this);\n    this.startListening = this.startListening.bind(this);\n    this.stopListening = this.stopListening.bind(this);\n    this.abortListening = this.abortListening.bind(this);\n    this.setSpeechRecognition = this.setSpeechRecognition.bind(this);\n    this.disableRecognition = this.disableRecognition.bind(this);\n    this.setSpeechRecognition(SpeechRecognition);\n    if (isAndroid()) {\n      this.updateFinalTranscript = debounce(this.updateFinalTranscript, 250, {\n        leading: true\n      });\n    }\n  }\n}\nconst CLEAR_TRANSCRIPT = \"CLEAR_TRANSCRIPT\";\nconst APPEND_TRANSCRIPT = \"APPEND_TRANSCRIPT\";\nconst clearTranscript = () => {\n  return {\n    type: CLEAR_TRANSCRIPT\n  };\n};\nconst appendTranscript = (interimTranscript, finalTranscript) => {\n  return {\n    type: APPEND_TRANSCRIPT,\n    payload: {\n      interimTranscript,\n      finalTranscript\n    }\n  };\n};\nconst transcriptReducer = (state, action) => {\n  switch (action.type) {\n    case CLEAR_TRANSCRIPT:\n      return {\n        interimTranscript: \"\",\n        finalTranscript: \"\"\n      };\n    case APPEND_TRANSCRIPT:\n      return {\n        interimTranscript: action.payload.interimTranscript,\n        finalTranscript: concatTranscripts(state.finalTranscript, action.payload.finalTranscript)\n      };\n    default:\n      throw new Error();\n  }\n};\nlet _browserSupportsSpeechRecognition = !!NativeSpeechRecognition;\nlet _browserSupportsContinuousListening = _browserSupportsSpeechRecognition && !isAndroid();\nlet recognitionManager;\nconst useSpeechRecognition = function () {\n  let {\n    transcribing = true,\n    clearTranscriptOnListen = true,\n    commands = []\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const [recognitionManager] = useState(SpeechRecognition.getRecognitionManager());\n  const [browserSupportsSpeechRecognition, setBrowserSupportsSpeechRecognition] = useState(_browserSupportsSpeechRecognition);\n  const [browserSupportsContinuousListening, setBrowserSupportsContinuousListening] = useState(_browserSupportsContinuousListening);\n  const [{\n    interimTranscript,\n    finalTranscript\n  }, dispatch] = useReducer(transcriptReducer, {\n    interimTranscript: recognitionManager.interimTranscript,\n    finalTranscript: \"\"\n  });\n  const [listening, setListening] = useState(recognitionManager.listening);\n  const [isMicrophoneAvailable, setMicrophoneAvailable] = useState(recognitionManager.isMicrophoneAvailable);\n  const commandsRef = useRef(commands);\n  commandsRef.current = commands;\n  const dispatchClearTranscript = () => {\n    dispatch(clearTranscript());\n  };\n  const resetTranscript = useCallback(() => {\n    recognitionManager.resetTranscript();\n    dispatchClearTranscript();\n  }, [recognitionManager]);\n  const testFuzzyMatch = (command, input, fuzzyMatchingThreshold) => {\n    const commandToString = typeof command === \"object\" ? command.toString() : command;\n    const commandWithoutSpecials = commandToString.replace(/[&/\\\\#,+()!$~%.'\":*?<>{}]/g, \"\").replace(/  +/g, \" \").trim();\n    const howSimilar = compareTwoStringsUsingDiceCoefficient(commandWithoutSpecials, input);\n    if (howSimilar >= fuzzyMatchingThreshold) {\n      return {\n        command,\n        commandWithoutSpecials,\n        howSimilar,\n        isFuzzyMatch: true\n      };\n    }\n    return null;\n  };\n  const testMatch = (command, input) => {\n    const pattern = commandToRegExp(command);\n    const result = pattern.exec(input);\n    if (result) {\n      return {\n        command,\n        parameters: result.slice(1)\n      };\n    }\n    return null;\n  };\n  const matchCommands = useCallback((newInterimTranscript, newFinalTranscript) => {\n    commandsRef.current.forEach(_ref2 => {\n      let {\n        command,\n        callback,\n        matchInterim = false,\n        isFuzzyMatch = false,\n        fuzzyMatchingThreshold = 0.8,\n        bestMatchOnly = false\n      } = _ref2;\n      const input = !newFinalTranscript && matchInterim ? newInterimTranscript.trim() : newFinalTranscript.trim();\n      const subcommands = Array.isArray(command) ? command : [command];\n      const results = subcommands.map(subcommand => {\n        if (isFuzzyMatch) {\n          return testFuzzyMatch(subcommand, input, fuzzyMatchingThreshold);\n        }\n        return testMatch(subcommand, input);\n      }).filter(x => x);\n      if (isFuzzyMatch && bestMatchOnly && results.length >= 2) {\n        results.sort((a, b) => b.howSimilar - a.howSimilar);\n        const {\n          command,\n          commandWithoutSpecials,\n          howSimilar\n        } = results[0];\n        callback(commandWithoutSpecials, input, howSimilar, {\n          command,\n          resetTranscript\n        });\n      } else {\n        results.forEach(result => {\n          if (result.isFuzzyMatch) {\n            const {\n              command,\n              commandWithoutSpecials,\n              howSimilar\n            } = result;\n            callback(commandWithoutSpecials, input, howSimilar, {\n              command,\n              resetTranscript\n            });\n          } else {\n            const {\n              command,\n              parameters\n            } = result;\n            callback(...parameters, {\n              command,\n              resetTranscript\n            });\n          }\n        });\n      }\n    });\n  }, [resetTranscript]);\n  const handleTranscriptChange = useCallback((newInterimTranscript, newFinalTranscript) => {\n    if (transcribing) {\n      dispatch(appendTranscript(newInterimTranscript, newFinalTranscript));\n    }\n    matchCommands(newInterimTranscript, newFinalTranscript);\n  }, [matchCommands, transcribing]);\n  const handleClearTranscript = useCallback(() => {\n    if (clearTranscriptOnListen) {\n      dispatchClearTranscript();\n    }\n  }, [clearTranscriptOnListen]);\n  useEffect(() => {\n    const id = SpeechRecognition.counter;\n    SpeechRecognition.counter += 1;\n    const callbacks = {\n      onListeningChange: setListening,\n      onMicrophoneAvailabilityChange: setMicrophoneAvailable,\n      onTranscriptChange: handleTranscriptChange,\n      onClearTranscript: handleClearTranscript,\n      onBrowserSupportsSpeechRecognitionChange: setBrowserSupportsSpeechRecognition,\n      onBrowserSupportsContinuousListeningChange: setBrowserSupportsContinuousListening\n    };\n    recognitionManager.subscribe(id, callbacks);\n    return () => {\n      recognitionManager.unsubscribe(id);\n    };\n  }, [transcribing, clearTranscriptOnListen, recognitionManager, handleTranscriptChange, handleClearTranscript]);\n  const transcript = concatTranscripts(finalTranscript, interimTranscript);\n  return {\n    transcript,\n    interimTranscript,\n    finalTranscript,\n    listening,\n    isMicrophoneAvailable,\n    resetTranscript,\n    browserSupportsSpeechRecognition,\n    browserSupportsContinuousListening\n  };\n};\nconst SpeechRecognition = {\n  counter: 0,\n  applyPolyfill: PolyfillSpeechRecognition => {\n    if (recognitionManager) {\n      recognitionManager.setSpeechRecognition(PolyfillSpeechRecognition);\n    } else {\n      recognitionManager = new RecognitionManager(PolyfillSpeechRecognition);\n    }\n    const browserSupportsPolyfill = !!PolyfillSpeechRecognition && browserSupportsPolyfills();\n    _browserSupportsSpeechRecognition = browserSupportsPolyfill;\n    _browserSupportsContinuousListening = browserSupportsPolyfill;\n  },\n  removePolyfill: () => {\n    if (recognitionManager) {\n      recognitionManager.setSpeechRecognition(NativeSpeechRecognition);\n    } else {\n      recognitionManager = new RecognitionManager(NativeSpeechRecognition);\n    }\n    _browserSupportsSpeechRecognition = !!NativeSpeechRecognition;\n    _browserSupportsContinuousListening = _browserSupportsSpeechRecognition && !isAndroid();\n  },\n  getRecognitionManager: () => {\n    if (!recognitionManager) {\n      recognitionManager = new RecognitionManager(NativeSpeechRecognition);\n    }\n    return recognitionManager;\n  },\n  getRecognition: () => {\n    const recognitionManager = SpeechRecognition.getRecognitionManager();\n    return recognitionManager.getRecognition();\n  },\n  startListening: function () {\n    let {\n      continuous,\n      language\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return /*#__PURE__*/_async_to_generator(function* () {\n      const recognitionManager = SpeechRecognition.getRecognitionManager();\n      yield recognitionManager.startListening({\n        continuous,\n        language\n      });\n    })();\n  },\n  stopListening: () => /*#__PURE__*/_async_to_generator(function* () {\n    const recognitionManager = SpeechRecognition.getRecognitionManager();\n    yield recognitionManager.stopListening();\n  })(),\n  abortListening: () => /*#__PURE__*/_async_to_generator(function* () {\n    const recognitionManager = SpeechRecognition.getRecognitionManager();\n    yield recognitionManager.abortListening();\n  })(),\n  browserSupportsSpeechRecognition: () => _browserSupportsSpeechRecognition,\n  browserSupportsContinuousListening: () => _browserSupportsContinuousListening\n};\nexport { SpeechRecognition as default, useSpeechRecognition };","map":{"version":3,"names":["_","_async_to_generator","useState","useReducer","useRef","useCallback","useEffect","debounce","NativeSpeechRecognition","window","SpeechRecognition","webkitSpeechRecognition","mozSpeechRecognition","msSpeechRecognition","oSpeechRecognition","isNative","isAndroid","test","navigator","userAgent","concatTranscripts","_len","arguments","length","transcriptParts","Array","_key","map","t","trim","join","optionalParam","optionalRegex","namedParam","splatParam","escapeRegExp","commandToRegExp","command","RegExp","source","replace","match","optional","compareTwoStringsUsingDiceCoefficient","first","second","toLowerCase","firstBigrams","Map","i","bigram","substring","count","has","get","set","intersectionSize","browserSupportsPolyfills","undefined","mediaDevices","getUserMedia","AudioContext","webkitAudioContext","RecognitionManager","setSpeechRecognition","browserSupportsRecogniser","disableRecognition","recognition","continuous","interimResults","onresult","updateTranscript","bind","onend","onRecognitionDisconnect","onerror","onError","emitBrowserSupportsSpeechRecognitionChange","subscribe","id","callbacks","subscribers","unsubscribe","emitListeningChange","listening","Object","keys","forEach","onListeningChange","emitMicrophoneAvailabilityChange","isMicrophoneAvailable","onMicrophoneAvailabilityChange","emitTranscriptChange","interimTranscript","finalTranscript","onTranscriptChange","emitClearTranscript","onClearTranscript","browserSupportsSpeechRecognitionChange","onBrowserSupportsSpeechRecognitionChange","onBrowserSupportsContinuousListeningChange","disconnect","disconnectType","pauseAfterDisconnect","abort","stop","stopListening","event","error","onStopListening","startListening","_ref","results","resultIndex","currentIndex","isFinal","confidence","updateFinalTranscript","transcript","isDuplicateResult","previousResultWasFinalOnly","newFinalTranscript","resetTranscript","_this","language","isContinuousChanged","isLanguageChanged","lang","start","e","DOMException","apply","abortListening","Promise","resolve","call","getRecognition","constructor","leading","CLEAR_TRANSCRIPT","APPEND_TRANSCRIPT","clearTranscript","type","appendTranscript","payload","transcriptReducer","state","action","Error","_browserSupportsSpeechRecognition","_browserSupportsContinuousListening","recognitionManager","useSpeechRecognition","transcribing","clearTranscriptOnListen","commands","getRecognitionManager","browserSupportsSpeechRecognition","setBrowserSupportsSpeechRecognition","browserSupportsContinuousListening","setBrowserSupportsContinuousListening","dispatch","setListening","setMicrophoneAvailable","commandsRef","current","dispatchClearTranscript","testFuzzyMatch","input","fuzzyMatchingThreshold","commandToString","toString","commandWithoutSpecials","howSimilar","isFuzzyMatch","testMatch","pattern","result","exec","parameters","slice","matchCommands","newInterimTranscript","_ref2","callback","matchInterim","bestMatchOnly","subcommands","isArray","subcommand","filter","x","sort","a","b","handleTranscriptChange","handleClearTranscript","counter","applyPolyfill","PolyfillSpeechRecognition","browserSupportsPolyfill","removePolyfill","default"],"sources":["C:/Users/Jd Creation/OneDrive/Desktop/bnichat-bot/frontend/node_modules/react-speech-recognition/dist/index.js"],"sourcesContent":["import { _ as _async_to_generator } from './cc-BU0zEyYq.js';\nimport { useState, useReducer, useRef, useCallback, useEffect } from 'react';\nimport debounce from 'lodash.debounce';\n\nconst NativeSpeechRecognition = typeof window !== \"undefined\" && (window.SpeechRecognition || window.webkitSpeechRecognition || window.mozSpeechRecognition || window.msSpeechRecognition || window.oSpeechRecognition);\nconst isNative = (SpeechRecognition)=>SpeechRecognition === NativeSpeechRecognition;\n\nvar isAndroid = (()=>/(android)/i.test(typeof navigator !== \"undefined\" ? navigator.userAgent : \"\"));\n\nconst concatTranscripts = (...transcriptParts)=>{\n    return transcriptParts.map((t)=>t.trim()).join(\" \").trim();\n};\n// The command matching code is a modified version of Backbone.Router by Jeremy Ashkenas, under the MIT license.\nconst optionalParam = /\\s*\\((.*?)\\)\\s*/g;\nconst optionalRegex = /(\\(\\?:[^)]+\\))\\?/g;\nconst namedParam = /(\\(\\?)?:\\w+/g;\nconst splatParam = /\\*/g;\nconst escapeRegExp = /[-{}[\\]+?.,\\\\^$|#]/g;\nconst commandToRegExp = (command)=>{\n    if (command instanceof RegExp) {\n        return new RegExp(command.source, \"i\");\n    }\n    command = command.replace(escapeRegExp, \"\\\\$&\").replace(optionalParam, \"(?:$1)?\").replace(namedParam, (match, optional)=>{\n        return optional ? match : \"([^\\\\s]+)\";\n    }).replace(splatParam, \"(.*?)\").replace(optionalRegex, \"\\\\s*$1?\\\\s*\");\n    return new RegExp(\"^\" + command + \"$\", \"i\");\n};\n// this is from https://github.com/aceakash/string-similarity\nconst compareTwoStringsUsingDiceCoefficient = (first, second)=>{\n    first = first.replace(/\\s+/g, \"\").toLowerCase();\n    second = second.replace(/\\s+/g, \"\").toLowerCase();\n    if (!first.length && !second.length) return 1; // if both are empty strings\n    if (!first.length || !second.length) return 0; // if only one is empty string\n    if (first === second) return 1; // identical\n    if (first.length === 1 && second.length === 1) return 0; // both are 1-letter strings\n    if (first.length < 2 || second.length < 2) return 0; // if either is a 1-letter string\n    const firstBigrams = new Map();\n    for(let i = 0; i < first.length - 1; i++){\n        const bigram = first.substring(i, i + 2);\n        const count = firstBigrams.has(bigram) ? firstBigrams.get(bigram) + 1 : 1;\n        firstBigrams.set(bigram, count);\n    }\n    let intersectionSize = 0;\n    for(let i = 0; i < second.length - 1; i++){\n        const bigram = second.substring(i, i + 2);\n        const count = firstBigrams.has(bigram) ? firstBigrams.get(bigram) : 0;\n        if (count > 0) {\n            firstBigrams.set(bigram, count - 1);\n            intersectionSize++;\n        }\n    }\n    return 2.0 * intersectionSize / (first.length + second.length - 2);\n};\nconst browserSupportsPolyfills = ()=>{\n    return typeof window !== \"undefined\" && window.navigator !== undefined && window.navigator.mediaDevices !== undefined && window.navigator.mediaDevices.getUserMedia !== undefined && (window.AudioContext !== undefined || window.webkitAudioContext !== undefined);\n};\n\nclass RecognitionManager {\n    setSpeechRecognition(SpeechRecognition) {\n        const browserSupportsRecogniser = !!SpeechRecognition && (isNative(SpeechRecognition) || browserSupportsPolyfills());\n        if (browserSupportsRecogniser) {\n            this.disableRecognition();\n            this.recognition = new SpeechRecognition();\n            this.recognition.continuous = false;\n            this.recognition.interimResults = true;\n            this.recognition.onresult = this.updateTranscript.bind(this);\n            this.recognition.onend = this.onRecognitionDisconnect.bind(this);\n            this.recognition.onerror = this.onError.bind(this);\n        }\n        this.emitBrowserSupportsSpeechRecognitionChange(browserSupportsRecogniser);\n    }\n    subscribe(id, callbacks) {\n        this.subscribers[id] = callbacks;\n    }\n    unsubscribe(id) {\n        delete this.subscribers[id];\n    }\n    emitListeningChange(listening) {\n        this.listening = listening;\n        Object.keys(this.subscribers).forEach((id)=>{\n            const { onListeningChange } = this.subscribers[id];\n            onListeningChange(listening);\n        });\n    }\n    emitMicrophoneAvailabilityChange(isMicrophoneAvailable) {\n        this.isMicrophoneAvailable = isMicrophoneAvailable;\n        Object.keys(this.subscribers).forEach((id)=>{\n            const { onMicrophoneAvailabilityChange } = this.subscribers[id];\n            onMicrophoneAvailabilityChange(isMicrophoneAvailable);\n        });\n    }\n    emitTranscriptChange(interimTranscript, finalTranscript) {\n        Object.keys(this.subscribers).forEach((id)=>{\n            const { onTranscriptChange } = this.subscribers[id];\n            onTranscriptChange(interimTranscript, finalTranscript);\n        });\n    }\n    emitClearTranscript() {\n        Object.keys(this.subscribers).forEach((id)=>{\n            const { onClearTranscript } = this.subscribers[id];\n            onClearTranscript();\n        });\n    }\n    emitBrowserSupportsSpeechRecognitionChange(browserSupportsSpeechRecognitionChange) {\n        Object.keys(this.subscribers).forEach((id)=>{\n            const { onBrowserSupportsSpeechRecognitionChange, onBrowserSupportsContinuousListeningChange } = this.subscribers[id];\n            onBrowserSupportsSpeechRecognitionChange(browserSupportsSpeechRecognitionChange);\n            onBrowserSupportsContinuousListeningChange(browserSupportsSpeechRecognitionChange);\n        });\n    }\n    disconnect(disconnectType) {\n        if (this.recognition && this.listening) {\n            switch(disconnectType){\n                case \"ABORT\":\n                    this.pauseAfterDisconnect = true;\n                    this.abort();\n                    break;\n                case \"RESET\":\n                    this.pauseAfterDisconnect = false;\n                    this.abort();\n                    break;\n                case \"STOP\":\n                default:\n                    this.pauseAfterDisconnect = true;\n                    this.stop();\n            }\n        }\n    }\n    disableRecognition() {\n        if (this.recognition) {\n            this.recognition.onresult = ()=>{};\n            this.recognition.onend = ()=>{};\n            this.recognition.onerror = ()=>{};\n            if (this.listening) {\n                this.stopListening();\n            }\n        }\n    }\n    onError(event) {\n        if (event && event.error && event.error === \"not-allowed\") {\n            this.emitMicrophoneAvailabilityChange(false);\n            this.disableRecognition();\n        }\n    }\n    onRecognitionDisconnect() {\n        this.onStopListening();\n        this.listening = false;\n        if (this.pauseAfterDisconnect) {\n            this.emitListeningChange(false);\n        } else if (this.recognition) {\n            if (this.recognition.continuous) {\n                this.startListening({\n                    continuous: this.recognition.continuous\n                });\n            } else {\n                this.emitListeningChange(false);\n            }\n        }\n        this.pauseAfterDisconnect = false;\n    }\n    updateTranscript({ results, resultIndex }) {\n        const currentIndex = resultIndex === undefined ? results.length - 1 : resultIndex;\n        this.interimTranscript = \"\";\n        this.finalTranscript = \"\";\n        for(let i = currentIndex; i < results.length; ++i){\n            if (results[i].isFinal && (!isAndroid() || results[i][0].confidence > 0)) {\n                this.updateFinalTranscript(results[i][0].transcript);\n            } else {\n                this.interimTranscript = concatTranscripts(this.interimTranscript, results[i][0].transcript);\n            }\n        }\n        let isDuplicateResult = false;\n        if (this.interimTranscript === \"\" && this.finalTranscript !== \"\") {\n            if (this.previousResultWasFinalOnly) {\n                isDuplicateResult = true;\n            }\n            this.previousResultWasFinalOnly = true;\n        } else {\n            this.previousResultWasFinalOnly = false;\n        }\n        if (!isDuplicateResult) {\n            this.emitTranscriptChange(this.interimTranscript, this.finalTranscript);\n        }\n    }\n    updateFinalTranscript(newFinalTranscript) {\n        this.finalTranscript = concatTranscripts(this.finalTranscript, newFinalTranscript);\n    }\n    resetTranscript() {\n        this.disconnect(\"RESET\");\n    }\n    startListening() {\n        return /*#__PURE__*/ _async_to_generator(function*({ continuous = false, language } = {}) {\n            if (!this.recognition) {\n                return;\n            }\n            const isContinuousChanged = continuous !== this.recognition.continuous;\n            const isLanguageChanged = language && language !== this.recognition.lang;\n            if (isContinuousChanged || isLanguageChanged) {\n                if (this.listening) {\n                    yield this.stopListening();\n                }\n                this.recognition.continuous = isContinuousChanged ? continuous : this.recognition.continuous;\n                this.recognition.lang = isLanguageChanged ? language : this.recognition.lang;\n            }\n            if (!this.listening) {\n                if (!this.recognition.continuous) {\n                    this.resetTranscript();\n                    this.emitClearTranscript();\n                }\n                try {\n                    yield this.start();\n                    this.emitListeningChange(true);\n                } catch (e) {\n                    // DOMExceptions indicate a redundant microphone start - safe to swallow\n                    if (!(e instanceof DOMException)) {\n                        this.emitMicrophoneAvailabilityChange(false);\n                    }\n                }\n            }\n        }).apply(this, arguments);\n    }\n    abortListening() {\n        return /*#__PURE__*/ _async_to_generator(function*() {\n            this.disconnect(\"ABORT\");\n            this.emitListeningChange(false);\n            yield new Promise((resolve)=>{\n                this.onStopListening = resolve;\n            });\n        }).call(this);\n    }\n    stopListening() {\n        return /*#__PURE__*/ _async_to_generator(function*() {\n            this.disconnect(\"STOP\");\n            this.emitListeningChange(false);\n            yield new Promise((resolve)=>{\n                this.onStopListening = resolve;\n            });\n        }).call(this);\n    }\n    getRecognition() {\n        return this.recognition;\n    }\n    start() {\n        return /*#__PURE__*/ _async_to_generator(function*() {\n            if (this.recognition && !this.listening) {\n                yield this.recognition.start();\n                this.listening = true;\n            }\n        }).call(this);\n    }\n    stop() {\n        if (this.recognition && this.listening) {\n            this.recognition.stop();\n            this.listening = false;\n        }\n    }\n    abort() {\n        if (this.recognition && this.listening) {\n            this.recognition.abort();\n            this.listening = false;\n        }\n    }\n    constructor(SpeechRecognition){\n        this.recognition = null;\n        this.pauseAfterDisconnect = false;\n        this.interimTranscript = \"\";\n        this.finalTranscript = \"\";\n        this.listening = false;\n        this.isMicrophoneAvailable = true;\n        this.subscribers = {};\n        this.onStopListening = ()=>{};\n        this.previousResultWasFinalOnly = false;\n        this.resetTranscript = this.resetTranscript.bind(this);\n        this.startListening = this.startListening.bind(this);\n        this.stopListening = this.stopListening.bind(this);\n        this.abortListening = this.abortListening.bind(this);\n        this.setSpeechRecognition = this.setSpeechRecognition.bind(this);\n        this.disableRecognition = this.disableRecognition.bind(this);\n        this.setSpeechRecognition(SpeechRecognition);\n        if (isAndroid()) {\n            this.updateFinalTranscript = debounce(this.updateFinalTranscript, 250, {\n                leading: true\n            });\n        }\n    }\n}\n\nconst CLEAR_TRANSCRIPT = \"CLEAR_TRANSCRIPT\";\nconst APPEND_TRANSCRIPT = \"APPEND_TRANSCRIPT\";\n\nconst clearTranscript = ()=>{\n    return {\n        type: CLEAR_TRANSCRIPT\n    };\n};\nconst appendTranscript = (interimTranscript, finalTranscript)=>{\n    return {\n        type: APPEND_TRANSCRIPT,\n        payload: {\n            interimTranscript,\n            finalTranscript\n        }\n    };\n};\n\nconst transcriptReducer = (state, action)=>{\n    switch(action.type){\n        case CLEAR_TRANSCRIPT:\n            return {\n                interimTranscript: \"\",\n                finalTranscript: \"\"\n            };\n        case APPEND_TRANSCRIPT:\n            return {\n                interimTranscript: action.payload.interimTranscript,\n                finalTranscript: concatTranscripts(state.finalTranscript, action.payload.finalTranscript)\n            };\n        default:\n            throw new Error();\n    }\n};\n\nlet _browserSupportsSpeechRecognition = !!NativeSpeechRecognition;\nlet _browserSupportsContinuousListening = _browserSupportsSpeechRecognition && !isAndroid();\nlet recognitionManager;\nconst useSpeechRecognition = ({ transcribing = true, clearTranscriptOnListen = true, commands = [] } = {})=>{\n    const [recognitionManager] = useState(SpeechRecognition.getRecognitionManager());\n    const [browserSupportsSpeechRecognition, setBrowserSupportsSpeechRecognition] = useState(_browserSupportsSpeechRecognition);\n    const [browserSupportsContinuousListening, setBrowserSupportsContinuousListening] = useState(_browserSupportsContinuousListening);\n    const [{ interimTranscript, finalTranscript }, dispatch] = useReducer(transcriptReducer, {\n        interimTranscript: recognitionManager.interimTranscript,\n        finalTranscript: \"\"\n    });\n    const [listening, setListening] = useState(recognitionManager.listening);\n    const [isMicrophoneAvailable, setMicrophoneAvailable] = useState(recognitionManager.isMicrophoneAvailable);\n    const commandsRef = useRef(commands);\n    commandsRef.current = commands;\n    const dispatchClearTranscript = ()=>{\n        dispatch(clearTranscript());\n    };\n    const resetTranscript = useCallback(()=>{\n        recognitionManager.resetTranscript();\n        dispatchClearTranscript();\n    }, [\n        recognitionManager\n    ]);\n    const testFuzzyMatch = (command, input, fuzzyMatchingThreshold)=>{\n        const commandToString = typeof command === \"object\" ? command.toString() : command;\n        const commandWithoutSpecials = commandToString.replace(/[&/\\\\#,+()!$~%.'\":*?<>{}]/g, \"\").replace(/  +/g, \" \").trim();\n        const howSimilar = compareTwoStringsUsingDiceCoefficient(commandWithoutSpecials, input);\n        if (howSimilar >= fuzzyMatchingThreshold) {\n            return {\n                command,\n                commandWithoutSpecials,\n                howSimilar,\n                isFuzzyMatch: true\n            };\n        }\n        return null;\n    };\n    const testMatch = (command, input)=>{\n        const pattern = commandToRegExp(command);\n        const result = pattern.exec(input);\n        if (result) {\n            return {\n                command,\n                parameters: result.slice(1)\n            };\n        }\n        return null;\n    };\n    const matchCommands = useCallback((newInterimTranscript, newFinalTranscript)=>{\n        commandsRef.current.forEach(({ command, callback, matchInterim = false, isFuzzyMatch = false, fuzzyMatchingThreshold = 0.8, bestMatchOnly = false })=>{\n            const input = !newFinalTranscript && matchInterim ? newInterimTranscript.trim() : newFinalTranscript.trim();\n            const subcommands = Array.isArray(command) ? command : [\n                command\n            ];\n            const results = subcommands.map((subcommand)=>{\n                if (isFuzzyMatch) {\n                    return testFuzzyMatch(subcommand, input, fuzzyMatchingThreshold);\n                }\n                return testMatch(subcommand, input);\n            }).filter((x)=>x);\n            if (isFuzzyMatch && bestMatchOnly && results.length >= 2) {\n                results.sort((a, b)=>b.howSimilar - a.howSimilar);\n                const { command, commandWithoutSpecials, howSimilar } = results[0];\n                callback(commandWithoutSpecials, input, howSimilar, {\n                    command,\n                    resetTranscript\n                });\n            } else {\n                results.forEach((result)=>{\n                    if (result.isFuzzyMatch) {\n                        const { command, commandWithoutSpecials, howSimilar } = result;\n                        callback(commandWithoutSpecials, input, howSimilar, {\n                            command,\n                            resetTranscript\n                        });\n                    } else {\n                        const { command, parameters } = result;\n                        callback(...parameters, {\n                            command,\n                            resetTranscript\n                        });\n                    }\n                });\n            }\n        });\n    }, [\n        resetTranscript\n    ]);\n    const handleTranscriptChange = useCallback((newInterimTranscript, newFinalTranscript)=>{\n        if (transcribing) {\n            dispatch(appendTranscript(newInterimTranscript, newFinalTranscript));\n        }\n        matchCommands(newInterimTranscript, newFinalTranscript);\n    }, [\n        matchCommands,\n        transcribing\n    ]);\n    const handleClearTranscript = useCallback(()=>{\n        if (clearTranscriptOnListen) {\n            dispatchClearTranscript();\n        }\n    }, [\n        clearTranscriptOnListen\n    ]);\n    useEffect(()=>{\n        const id = SpeechRecognition.counter;\n        SpeechRecognition.counter += 1;\n        const callbacks = {\n            onListeningChange: setListening,\n            onMicrophoneAvailabilityChange: setMicrophoneAvailable,\n            onTranscriptChange: handleTranscriptChange,\n            onClearTranscript: handleClearTranscript,\n            onBrowserSupportsSpeechRecognitionChange: setBrowserSupportsSpeechRecognition,\n            onBrowserSupportsContinuousListeningChange: setBrowserSupportsContinuousListening\n        };\n        recognitionManager.subscribe(id, callbacks);\n        return ()=>{\n            recognitionManager.unsubscribe(id);\n        };\n    }, [\n        transcribing,\n        clearTranscriptOnListen,\n        recognitionManager,\n        handleTranscriptChange,\n        handleClearTranscript\n    ]);\n    const transcript = concatTranscripts(finalTranscript, interimTranscript);\n    return {\n        transcript,\n        interimTranscript,\n        finalTranscript,\n        listening,\n        isMicrophoneAvailable,\n        resetTranscript,\n        browserSupportsSpeechRecognition,\n        browserSupportsContinuousListening\n    };\n};\nconst SpeechRecognition = {\n    counter: 0,\n    applyPolyfill: (PolyfillSpeechRecognition)=>{\n        if (recognitionManager) {\n            recognitionManager.setSpeechRecognition(PolyfillSpeechRecognition);\n        } else {\n            recognitionManager = new RecognitionManager(PolyfillSpeechRecognition);\n        }\n        const browserSupportsPolyfill = !!PolyfillSpeechRecognition && browserSupportsPolyfills();\n        _browserSupportsSpeechRecognition = browserSupportsPolyfill;\n        _browserSupportsContinuousListening = browserSupportsPolyfill;\n    },\n    removePolyfill: ()=>{\n        if (recognitionManager) {\n            recognitionManager.setSpeechRecognition(NativeSpeechRecognition);\n        } else {\n            recognitionManager = new RecognitionManager(NativeSpeechRecognition);\n        }\n        _browserSupportsSpeechRecognition = !!NativeSpeechRecognition;\n        _browserSupportsContinuousListening = _browserSupportsSpeechRecognition && !isAndroid();\n    },\n    getRecognitionManager: ()=>{\n        if (!recognitionManager) {\n            recognitionManager = new RecognitionManager(NativeSpeechRecognition);\n        }\n        return recognitionManager;\n    },\n    getRecognition: ()=>{\n        const recognitionManager = SpeechRecognition.getRecognitionManager();\n        return recognitionManager.getRecognition();\n    },\n    startListening: ({ continuous, language } = {})=>/*#__PURE__*/ _async_to_generator(function*() {\n            const recognitionManager = SpeechRecognition.getRecognitionManager();\n            yield recognitionManager.startListening({\n                continuous,\n                language\n            });\n        })(),\n    stopListening: ()=>/*#__PURE__*/ _async_to_generator(function*() {\n            const recognitionManager = SpeechRecognition.getRecognitionManager();\n            yield recognitionManager.stopListening();\n        })(),\n    abortListening: ()=>/*#__PURE__*/ _async_to_generator(function*() {\n            const recognitionManager = SpeechRecognition.getRecognitionManager();\n            yield recognitionManager.abortListening();\n        })(),\n    browserSupportsSpeechRecognition: ()=>_browserSupportsSpeechRecognition,\n    browserSupportsContinuousListening: ()=>_browserSupportsContinuousListening\n};\n\nexport { SpeechRecognition as default, useSpeechRecognition };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}