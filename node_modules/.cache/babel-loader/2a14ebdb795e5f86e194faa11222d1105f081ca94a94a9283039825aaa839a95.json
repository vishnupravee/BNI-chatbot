{"ast":null,"code":"const express = require('express');\nconst bodyParser = require('body-parser');\nconst cors = require('cors');\nconst fetch = require('node-fetch');\nconst app = express();\nconst port = 5001;\napp.use(bodyParser.json());\napp.use(cors());\nconst API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent';\n\n// IMPORTANT: Replace with your securely stored API key\nconst GOOGLE_API_KEY = 'AIzaSyBo_n4TmNYzZ8wEz_uScuqgr-oJhZRC5kI';\napp.post('/api/chat', async (req, res) => {\n  const {\n    message\n  } = req.body;\n  console.log('Received message from frontend:', message);\n  try {\n    const fullApiUrl = `${API_URL}?key=${GOOGLE_API_KEY}`;\n    const payload = {\n      contents: [{\n        parts: [{\n          text: message\n        }]\n      }]\n    };\n    const response = await fetch(fullApiUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n    const data = await response.json();\n\n    // --- NEW, ROBUST ERROR CHECKING ---\n    // Log the full response from Google for debugging purposes\n    console.log('Full response from Google AI:', JSON.stringify(data, null, 2));\n\n    // Check if the response contains valid candidates.\n    // If not, it was likely blocked by safety settings or another issue.\n    if (!data.candidates || data.candidates.length === 0) {\n      console.error('No candidates returned from Google AI. The prompt may have been blocked.');\n      // Send a user-friendly message back to the frontend\n      return res.status(200).json({\n        reply: \"I am unable to provide a response to that query. Please try asking something else.\"\n      });\n    }\n    const botReply = data.candidates[0].content.parts[0].text;\n    console.log('Sending reply to frontend:', botReply);\n    res.json({\n      reply: botReply.trim()\n    });\n  } catch (error) {\n    console.error('Internal server error:', error); // Log the actual error object\n    res.status(500).json({\n      error: 'Failed to get a response from the AI. Check backend server logs for details.'\n    });\n  }\n});\napp.listen(port, () => {\n  console.log(`Backend server is running correctly on http://localhost:${port}`);\n  console.log('Waiting for requests from the frontend...');\n});","map":{"version":3,"names":["express","require","bodyParser","cors","fetch","app","port","use","json","API_URL","GOOGLE_API_KEY","post","req","res","message","body","console","log","fullApiUrl","payload","contents","parts","text","response","method","headers","JSON","stringify","data","candidates","length","error","status","reply","botReply","content","trim","listen"],"sources":["C:/Users/dell/bnichat-bot/frontend/src/App.js"],"sourcesContent":["const express = require('express');\nconst bodyParser = require('body-parser');\nconst cors = require('cors');\nconst fetch = require('node-fetch');\n\nconst app = express();\nconst port = 5001;\n\napp.use(bodyParser.json());\napp.use(cors());\n\nconst API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent';\n\n// IMPORTANT: Replace with your securely stored API key\nconst GOOGLE_API_KEY = 'AIzaSyBo_n4TmNYzZ8wEz_uScuqgr-oJhZRC5kI'; \n\napp.post('/api/chat', async (req, res) => {\n    const { message } = req.body;\n    console.log('Received message from frontend:', message);\n\n    try {\n        const fullApiUrl = `${API_URL}?key=${GOOGLE_API_KEY}`;\n        \n        const payload = {\n            contents: [{\n                parts: [{\n                    text: message\n                }]\n            }]\n        };\n\n        const response = await fetch(fullApiUrl, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(payload)\n        });\n\n        const data = await response.json();\n\n        // --- NEW, ROBUST ERROR CHECKING ---\n        // Log the full response from Google for debugging purposes\n        console.log('Full response from Google AI:', JSON.stringify(data, null, 2));\n\n        // Check if the response contains valid candidates.\n        // If not, it was likely blocked by safety settings or another issue.\n        if (!data.candidates || data.candidates.length === 0) {\n            console.error('No candidates returned from Google AI. The prompt may have been blocked.');\n            // Send a user-friendly message back to the frontend\n            return res.status(200).json({ reply: \"I am unable to provide a response to that query. Please try asking something else.\" });\n        }\n\n        const botReply = data.candidates[0].content.parts[0].text;\n        console.log('Sending reply to frontend:', botReply);\n\n        res.json({ reply: botReply.trim() });\n\n    } catch (error) {\n        console.error('Internal server error:', error); // Log the actual error object\n        res.status(500).json({ error: 'Failed to get a response from the AI. Check backend server logs for details.' });\n    }\n});\n\napp.listen(port, () => {\n    console.log(`Backend server is running correctly on http://localhost:${port}`);\n    console.log('Waiting for requests from the frontend...');\n});"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMG,KAAK,GAAGH,OAAO,CAAC,YAAY,CAAC;AAEnC,MAAMI,GAAG,GAAGL,OAAO,CAAC,CAAC;AACrB,MAAMM,IAAI,GAAG,IAAI;AAEjBD,GAAG,CAACE,GAAG,CAACL,UAAU,CAACM,IAAI,CAAC,CAAC,CAAC;AAC1BH,GAAG,CAACE,GAAG,CAACJ,IAAI,CAAC,CAAC,CAAC;AAEf,MAAMM,OAAO,GAAG,oFAAoF;;AAEpG;AACA,MAAMC,cAAc,GAAG,yCAAyC;AAEhEL,GAAG,CAACM,IAAI,CAAC,WAAW,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACtC,MAAM;IAAEC;EAAQ,CAAC,GAAGF,GAAG,CAACG,IAAI;EAC5BC,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEH,OAAO,CAAC;EAEvD,IAAI;IACA,MAAMI,UAAU,GAAG,GAAGT,OAAO,QAAQC,cAAc,EAAE;IAErD,MAAMS,OAAO,GAAG;MACZC,QAAQ,EAAE,CAAC;QACPC,KAAK,EAAE,CAAC;UACJC,IAAI,EAAER;QACV,CAAC;MACL,CAAC;IACL,CAAC;IAED,MAAMS,QAAQ,GAAG,MAAMnB,KAAK,CAACc,UAAU,EAAE;MACrCM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDV,IAAI,EAAEW,IAAI,CAACC,SAAS,CAACR,OAAO;IAChC,CAAC,CAAC;IAEF,MAAMS,IAAI,GAAG,MAAML,QAAQ,CAACf,IAAI,CAAC,CAAC;;IAElC;IACA;IACAQ,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAES,IAAI,CAACC,SAAS,CAACC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;;IAE3E;IACA;IACA,IAAI,CAACA,IAAI,CAACC,UAAU,IAAID,IAAI,CAACC,UAAU,CAACC,MAAM,KAAK,CAAC,EAAE;MAClDd,OAAO,CAACe,KAAK,CAAC,0EAA0E,CAAC;MACzF;MACA,OAAOlB,GAAG,CAACmB,MAAM,CAAC,GAAG,CAAC,CAACxB,IAAI,CAAC;QAAEyB,KAAK,EAAE;MAAqF,CAAC,CAAC;IAChI;IAEA,MAAMC,QAAQ,GAAGN,IAAI,CAACC,UAAU,CAAC,CAAC,CAAC,CAACM,OAAO,CAACd,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI;IACzDN,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEiB,QAAQ,CAAC;IAEnDrB,GAAG,CAACL,IAAI,CAAC;MAAEyB,KAAK,EAAEC,QAAQ,CAACE,IAAI,CAAC;IAAE,CAAC,CAAC;EAExC,CAAC,CAAC,OAAOL,KAAK,EAAE;IACZf,OAAO,CAACe,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC,CAAC,CAAC;IAChDlB,GAAG,CAACmB,MAAM,CAAC,GAAG,CAAC,CAACxB,IAAI,CAAC;MAAEuB,KAAK,EAAE;IAA+E,CAAC,CAAC;EACnH;AACJ,CAAC,CAAC;AAEF1B,GAAG,CAACgC,MAAM,CAAC/B,IAAI,EAAE,MAAM;EACnBU,OAAO,CAACC,GAAG,CAAC,2DAA2DX,IAAI,EAAE,CAAC;EAC9EU,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;AAC5D,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}